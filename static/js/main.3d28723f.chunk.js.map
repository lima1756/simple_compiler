{"version":3,"sources":["components/CodeEditor/utils/HighlightRules.ts","components/CodeEditor/CodeEditor.tsx","components/Navbar/Navbar.tsx","components/OutputViewer/Viewers/TreeViewer/TreeViewer.tsx","components/OutputViewer/Viewers/ErrorViewer/ErrorViewer.tsx","components/OutputViewer/OutputViewer.tsx","compiler/Token/TokenType.ts","compiler/Tables/SymbolTable.ts","compiler/Token/Token.ts","compiler/Parser/SyntaxAnalysis.ts","compiler/Parser/SemanticAnalysis.ts","compiler/Parser/Parser.ts","compiler/Scanner/Scanner.ts","compiler/Tables/ErrorTable.ts","compiler/Compiler.ts","components/Loader/Loader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomHighlightRules","$rules","start","token","regex","ace","require","TextHighlightRules","CustomSyntaxMode","HighlightRules","Mode","CodeEditor","props","refEditor","React","useRef","useEffect","customMode","current","editor","getSession","setMode","className","ref","placeholder","mode","theme","value","code","onChange","setCode","name","editorProps","$blockScrolling","height","width","options","draggable","edge","Navbar","alignLinks","brand","href","menuIcon","onClick","exec","type","uploadCode","id","htmlFor","last","k","x","y","drag_handler","d3","on","event","boxLimit","dx","dy","this","attr","zoom_handler","transform","TreeViewer","refDiv","margin","nodeData","tree","size","rate","nodes","treemap","i","children","length","removeChild","g","append","selectAll","data","descendants","slice","enter","d","parent","node","style","text","ErrorViewer","errorTable","errors","map","error","message","line","OutputViewer","TokenType","prettyObject","obj","JSON","stringify","compiler","symbolTable","parseTree","parser","ast","tabsOptions","swipeable","duration","onShow","responsiveThreshold","Infinity","padding","title","disabled","idx","SymbolType","Token","end","ParseTreeSymbol","Symbol","declaration","SymbolTable","key","AstNodeType","ParseTreeNode","symbol","SyntaxAnalysis","input","currentToken","reverse","pop","eof","symbolType","existing","get","add","curr","push","next","val","accept","prog","subtree1","dcls","subtree2","stmts","expect","Prog","dcltree","dcl","empty","dclstree","Dcls","Dcl","floatdcl","checkIfDeclaration","float","intdcl","int","stmtree","stmt","stmtstree","Stmts","Stmt","idtree","assign","expr","print","inum","fnum","Val","Expr","plus","minus","AstNode","SemanticAnalysis","root","program","concat","symbolTableOrError","astNode","child","op","tokenType","int2float","convertType","currNode","Parser","run","LexItem","Scanner","lexDefinition","blank","newline","output","currentLine","test","errorLength","errorString","escapeToken","substr","errorToken","ErrorItem","item","toString","ErrorTable","sort","a","b","compareTo","str","Compiler","tokens","Loader","active","color","flashing","App","useState","loading","setLoading","setCompiler","e","fr","FileReader","onloadend","result","readAsText","target","files","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d28723f.chunk.js","sourcesContent":["import \"ace-builds/src-noconflict/mode-java\";\nimport ace from \"ace-builds\"\n\nexport class CustomHighlightRules extends ace.require(\n  \"ace/mode/text_highlight_rules\"\n).TextHighlightRules {\n\n  constructor() {\n    super();\n    this.$rules = {\n      start: [\n        {\n          token: \"keyword\", // declarations\n          regex: \"(f|i|p)\"\n        },\n        {\n          token: \"constant.language.boolean\", // id\n          regex: /([a-e]|[g-h]|[j-o]|[q-z]){1}/\n        },\n        {\n          token: \"constant.numeric\", // float\n          regex: /[0-9]+\\.[0-9]+/\n        },\n        {\n          token: \"constant.numeric\", // int\n          regex: /[0-9]+/\n        },\n        {\n          token: \"string\",\n          regex: /(=|\\+|-){1}/\n        }\n      ]\n    };\n  }\n}\n\nexport default class CustomSyntaxMode extends ace.require(\"ace/mode/java\")\n  .Mode {\n  constructor() {\n    super();\n    this.HighlightRules = CustomHighlightRules;\n  }\n}","import React from 'react';\nimport './CodeEditor.css';\nimport AceEditor from \"react-ace\";\nimport CustomSyntaxMode from \"./utils/HighlightRules\";\n\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\ninterface CodeEditorProps {\n  code: string, setCode: any\n}\n\nfunction CodeEditor(props: CodeEditorProps) {\n  const refEditor = React.useRef<AceEditor>(null);\n  React.useEffect(() => {\n    const customMode = new CustomSyntaxMode();\n    if (refEditor.current != null) {\n      refEditor.current.editor.getSession().setMode(customMode as any);\n    }\n  })\n  return (\n    <div className=\"CodeEditor\">\n      <AceEditor\n        ref={refEditor}\n        placeholder=\"Please enter your code! :)\"\n        mode=\"javascript\"\n        theme=\"monokai\"\n        value={props.code}\n        onChange={value => props.setCode(value)}\n        name=\"editor\"\n        editorProps={{ $blockScrolling: true }}\n        height=\"100%\"\n        width=\"100%\"\n      />\n    </div>\n  );\n}\n\nexport default CodeEditor;\n","import React from 'react';\nimport './Navbar.scss';\nimport { Navbar as Nav, NavItem, Icon, NavbarAlignment } from 'react-materialize';\n\nconst options = {\n    draggable: true,\n    edge: \"left\" as NavbarAlignment\n}\n\ninterface NavbarProps {\n    exec: any, uploadCode: any\n}\n\nfunction Navbar(props: NavbarProps) {\n    return (\n        <Nav\n            alignLinks=\"right\"\n            brand={<a href=\"#\">Simple Addition Calculator</a>}\n            menuIcon={<Icon>menu</Icon>}\n            options={options}\n            className=\"Navbar\"\n        >\n            <NavItem href=\"#\" onClick={props.exec}>\n                <Icon>refresh</Icon>\n            </NavItem>\n            <NavItem href=\"#\">\n                <input type=\"file\" onChange={props.uploadCode} id=\"file_upload\" />\n                <label htmlFor=\"file_upload\"><Icon>cloud_upload</Icon></label>\n            </NavItem>\n        </Nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport \"./TreeViewer.scss\";\n\ninterface TreeViewerProps {\n  tree: any;\n  rate: number;\n}\n\nlet last = { k: 1, x: 0, y: 40 }\n\nconst drag_handler = d3.drag()\n  .on(\"drag\", function (event: any) {\n    const boxLimit = 2000 * last.k;\n    if (last.x < boxLimit && last.x > -boxLimit || (last.x >= boxLimit && event.dx < 0) || (last.x <= -boxLimit && event.dx > 0)) {\n      last.x += event.dx\n    }\n    else {\n      last.x = last.x > 0 ? boxLimit : -boxLimit;\n    }\n    if (last.y < boxLimit && last.y > -boxLimit || (last.y >= boxLimit && event.dy < 0) || (last.y <= -boxLimit && event.dy > 0)) {\n      last.y += event.dy\n    }\n    else {\n      last.y = last.y > 0 ? boxLimit : -boxLimit;\n    }\n    d3.select(this)\n      .attr(\"transform\",\n        \"translate(\" + last.x + \",\" + last.y + \") scale(\" + last.k + \")\");\n  });\n\nconst zoom_handler = d3.zoom()\n  .on(\"zoom\", function ({ transform }) {\n    last.k = transform.k;\n    d3.select(this)\n      .attr(\"transform\",\n        \"translate(\" + last.x + \",\" + last.y + \") scale(\" + last.k + \")\");\n  })\n\nfunction TreeViewer(props: TreeViewerProps) {\n  const refDiv = React.useRef<HTMLDivElement>(null);\n  React.useEffect(() => {\n    last = { k: 1, x: 0, y: 40 }\n    const margin = { top: 40, right: 0, bottom: 0, left: 0 };\n    const nodeData = d3.hierarchy(props.tree)\n    const size = { x: nodeData.height * props.rate, y: nodeData.height * props.rate / 1.8 };\n    const treemap = d3.tree().size([size.x, size.y])\n    const nodes = treemap(nodeData);\n    if (refDiv.current != null) {\n      for (let i = 0; i < refDiv.current.children.length; i++) {\n        refDiv.current.removeChild(refDiv.current.children[i])\n      }\n      let svg = d3.select(refDiv.current).append(\"svg\").attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n      let g = svg.append(\"g\").attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .attr(\"cursor\", \"grab\");\n\n      g.append(\"rect\")\n        .attr(\"x\", \"-2000\")\n        .attr(\"y\", \"-2000\")\n        .attr(\"width\", \"5000\")\n        .attr(\"height\", \"5000\")\n        .attr(\"fill\", \"#fafafa\")\n        .attr(\"stroke\", \"black\")\n\n      g.selectAll(\".link\")\n        .data(nodes.descendants().slice(1))\n        .enter().append(\"path\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", d => \"M\" + d.x + \",\" + d.y\n          + \"L\" + d.parent!.x + \",\" + d.parent!.y);\n\n      // adds each node as a group\n      let node = g.selectAll(\".node\")\n        .data(nodes.descendants())\n        .enter().append(\"g\")\n        .attr(\"class\", function (d) {\n          return \"node\" +\n            (d.children ? \" node--internal\" : \" node--leaf\");\n        })\n        .attr(\"transform\", d => \"translate(\" + d.x + \",\" + d.y + \")\");\n\n      // adds the circle to the node\n      node.append(\"circle\")\n        .attr(\"r\", 12);\n\n      // adds the text to the node\n      node.append(\"text\")\n        .attr(\"dy\", \".35em\")\n        .attr(\"y\", d => d.children ? -20 : 20)\n        .style(\"text-anchor\", \"middle\")\n        .text((d: any) => d.data.name);\n\n      drag_handler(g as any);\n      zoom_handler(g as any);\n\n    }\n  }\n  )\n\n  return (\n    <div ref={refDiv} style={{ height: \"100%\" }}>\n\n    </div>\n  )\n\n}\n\nexport default TreeViewer","import React from 'react';\nimport { Collection, CollectionItem, Icon } from 'react-materialize';\nimport ErrorTable from '../../../../compiler/Tables/ErrorTable';\n\ninterface ErrorViewerProps {\n  errorTable: ErrorTable,\n}\n\nfunction ErrorViewer(props: ErrorViewerProps) {\n\n  return (\n    <Collection>\n      {props.errorTable.errors.map(error => (\n        <CollectionItem key={error.message}>\n          <span className=\"title\">\n            <b>{error.message}</b>\n          </span>\n          <p style={{ margin: 0 }}>\n            <b>Line: </b> {error.token.line}\n            <br />\n            <b>Start: </b> {error.token.start}\n            <br />\n            <b>Value: </b> {error.token.data}\n          </p>\n        </CollectionItem>\n      ))}\n      {props.errorTable.length == 0 && (\n        <CollectionItem >\n          <span className=\"title\">\n            <b>No errors!</b>\n          </span>\n        </CollectionItem>\n      )}\n    </Collection >\n  )\n}\n\nexport default ErrorViewer;","import React from 'react';\nimport './OutputViewer.scss'\nimport { Tabs, Tab } from 'react-materialize';\nimport TreeViewer from './Viewers/TreeViewer/TreeViewer';\nimport ErrorViewer from './Viewers/ErrorViewer/ErrorViewer';\nimport Compiler from '../../compiler/Compiler';\n\ninterface OutputViewerProps {\n  compiler: Compiler\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const prettyObject = (obj: any) => {\n    return JSON.stringify(obj, null, 2);\n  }\n  const errorTable = props.compiler.errorTable;\n  const symbolTable = props.compiler.symbolTable;\n  const parseTree = props.compiler.parser.parseTree;\n  const ast = props.compiler.parser.ast;\n  const tabsOptions = { swipeable: false, duration: 300, onShow: () => { }, responsiveThreshold: Infinity };\n  const display = errorTable != null && symbolTable != null;\n  if (display) {\n    const errors = errorTable!.length != 0;\n    return (\n      <div className=\"row OutputViewer\" >\n        <div className=\"col s12\" style={{ padding: 0, margin: 0 }}>\n          <Tabs options={tabsOptions}>\n            <Tab title=\"Error/warnings\">\n              <ErrorViewer errorTable={errorTable!} />\n            </Tab>\n            <Tab title=\"Symbol table\" disabled={errors}>\n              <pre>{prettyObject(symbolTable)}</pre>\n            </Tab>\n            <Tab title=\"Parse Tree JSON\" disabled={errors}>\n              {!errors && <pre>{prettyObject(parseTree)}</pre>}\n            </Tab>\n            <Tab title=\"Parse Tree Viewer\" disabled={errors} idx=\"asdf\">\n              {!errors && <TreeViewer tree={parseTree} rate={150} />}\n            </Tab>\n            <Tab title=\"AST JSON\" disabled={errors}>\n              {!errors && <pre>{prettyObject(ast)}</pre>}\n            </Tab>\n            <Tab title=\"AST Viewer\" disabled={errors} idx=\"asdf\">\n              {!errors && <TreeViewer tree={ast} rate={200} />}\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"row OutputViewer\" >\n      <div className=\"col s12\" style={{ padding: 0, margin: 0 }}>\n        <Tabs options={tabsOptions}>\n          <Tab title=\"Instructions\">\n            Code to the left, execute on the top, output in this tabs\n      </Tab>\n        </Tabs>\n      </div>\n    </div>)\n\n}\n\nexport default OutputViewer;\n","enum TokenType {\n  floatdcl, intdcl, print, id, assign, plus, minus, inum, fnum, blank, error, newline, eof\n}\n\nexport default TokenType;","enum SymbolType {\n  float, int\n}\nclass Symbol {\n  name: string\n  type: SymbolType\n  declaration: { start: number, line: number }\n\n  constructor(name: string, type: SymbolType, declaration: { start: number, line: number }) {\n    this.name = name;\n    this.type = type;\n    this.declaration = declaration;\n  }\n}\n\nclass SymbolTable {\n  data: { [key: string]: Symbol } = {}\n  length: number = 0;\n\n  addValue(key: string, value: Symbol) {\n    this.data[key] = value;\n    this.length += 1\n  }\n\n  add(name: string, type: SymbolType, declaration: { start: number, line: number }) {\n    this.data[name] = new Symbol(name, type, declaration);\n    this.length += 1\n  }\n\n  get(key: string): Symbol | null {\n    return this.data[key];\n  }\n}\n\nexport { SymbolType, Symbol };\nexport default SymbolTable;","import TokenType from './TokenType';\n\nclass Token {\n  type: TokenType;\n  data: string;\n  start: number;\n  end: number;\n  line: number;\n\n  constructor(type: TokenType, data: string, start: number, end: number, line: number) {\n    this.type = type;\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n  }\n\n  toString(): string {\n    return `Token {type: ${TokenType[this.type]} data: ${this.data} start: ${this.start} end: ${this.end} line: ${this.line}}`\n  }\n}\n\nexport default Token;","import TokenType from '../Token/TokenType';\nimport Token from '../Token/Token';\nimport ErrorTable from '../Tables/ErrorTable';\nimport SymbolTable, { SymbolType } from '../Tables/SymbolTable';\n\nenum ParseTreeSymbol {\n  Prog, Dcls, Dcl, Stmts, Stmt, Expr, Val, empty\n}\n\nclass ParseTreeNode {\n  name: string;\n  token: Token | null;\n  symbol: ParseTreeSymbol | null;\n  children: Array<ParseTreeNode> = [];\n  constructor(name: string, token: Token | null = null, symbol: ParseTreeSymbol | null = null) {\n    this.name = name;\n    this.token = token;\n    this.symbol = symbol;\n  }\n}\n\nclass SyntaxAnalysis {\n\n  input: Array<Token>;\n  currentToken: Token;\n  symbolTable: SymbolTable;\n  errorTable: ErrorTable;\n\n  constructor(input: Array<Token>, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.input = input.reverse();\n    this.currentToken = this.input.pop() || new Token(TokenType.eof, \"\", 0, 0, 0);\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n  }\n\n  checkIfDeclaration(symbolType: SymbolType): void {\n    const value = this.currentToken.data;\n    const existing = this.symbolTable.get(value);\n    if (existing) {\n      this.errorTable.add(this.currentToken, `The id ${value} was already declared in line ${existing.declaration.line} position: ${existing.declaration.start}`)\n      return;\n    }\n    this.symbolTable.add(value, symbolType, { line: this.currentToken.line, start: this.currentToken.start })\n  }\n\n  next(): void {\n    this.currentToken = this.input.pop()!;\n  }\n\n  accept(type: TokenType): ParseTreeNode | null {\n    if (this.currentToken && this.currentToken.type == type) {\n      const curr = new ParseTreeNode(TokenType[type], this.currentToken);\n      curr.children.push(new ParseTreeNode(this.currentToken.data));\n      this.next();\n      return curr;\n    }\n    return null;\n  }\n\n  error(message: string) {\n    this.errorTable.add(this.currentToken, message + \" but got: \" + this.currentToken.data);\n  }\n\n  expect(type: TokenType): ParseTreeNode | null {\n    const val = this.accept(type)\n    if (val != null) {\n      return val;\n    }\n    this.error(\"Expecting token: \" + TokenType[type]);\n    return null;\n  }\n\n  run(): ParseTreeNode {\n    return this.prog();\n  }\n\n  prog(): any {\n    let subtree1 = this.dcls();\n    let subtree2 = this.stmts();\n    this.expect(TokenType.eof);\n    let node = new ParseTreeNode(\"Prog\", null, ParseTreeSymbol.Prog);\n    node.children.push(subtree1, subtree2, new ParseTreeNode(\"$\"))\n    return node;\n  }\n\n  dcls(): any {\n    let dcltree = this.dcl();\n    if (dcltree == null) {\n      return new ParseTreeNode(\"λ\", null, ParseTreeSymbol.empty);\n    }\n    let dclstree = this.dcls()\n    let node = new ParseTreeNode(\"Dcls\", null, ParseTreeSymbol.Dcls)\n    node.children.push(dcltree, dclstree);\n    return node;\n  }\n\n  dcl(): any {\n    let node = new ParseTreeNode(\"Dcl\", null, ParseTreeSymbol.Dcl)\n    let val = this.accept(TokenType.floatdcl)\n    if (val != null) {\n      this.checkIfDeclaration(SymbolType.float);\n      let id = this.expect(TokenType.id)\n      if (id == null) { return null; }\n      node.children.push(val, id)\n      return node\n    }\n    val = this.accept(TokenType.intdcl)\n    if (val != null) {\n      this.checkIfDeclaration(SymbolType.int);\n      let id = this.expect(TokenType.id)\n      if (id == null) { return null; }\n      node.children.push(val, id)\n      return node\n    }\n    return null;\n  }\n\n  stmts(): any {\n    let stmtree = this.stmt();\n    if (stmtree == null) {\n      return new ParseTreeNode(\"λ\", null, ParseTreeSymbol.empty);\n    }\n    let stmtstree = this.stmts()\n    let node = new ParseTreeNode(\"Stmts\", null, ParseTreeSymbol.Stmts)\n    node.children.push(stmtree, stmtstree);\n    return node;\n  }\n\n  stmt(): any {\n    let node = new ParseTreeNode(\"Stmt\", null, ParseTreeSymbol.Stmt)\n    let idtree = this.accept(TokenType.id)\n    if (idtree != null) {\n      let assign = this.expect(TokenType.assign);\n      if (assign == null) {\n        return null;\n      }\n      let expr = this.expr();\n      if (expr == null) {\n        return null;\n      }\n      node.children.push(idtree, assign, expr);\n      return node;\n    }\n    let print = this.accept(TokenType.print)\n    if (print != null) {\n      let id = this.expect(TokenType.id);\n      if (id == null) {\n        return null;\n      }\n      node.children.push(print, id)\n      return node\n    }\n    return null;\n  }\n\n  val(): any {\n    let id = this.accept(TokenType.id);\n    let inum = this.accept(TokenType.inum);\n    let fnum = this.accept(TokenType.fnum)\n    let node = new ParseTreeNode(\"Val\", null, ParseTreeSymbol.Val)\n    if (id != null) {\n      node.children.push(id)\n      return node;\n    }\n    if (inum != null) {\n      node.children.push(inum)\n      return node;\n    }\n    if (fnum != null) {\n      node.children.push(fnum)\n      return node;\n    }\n    this.error(\"Expecting a value (id, integer, float)\");\n    return null;\n  }\n\n  expr(): any {\n    let node = new ParseTreeNode(\"Expr\", null, ParseTreeSymbol.Expr)\n    let val = this.val();\n    if (val == null) {\n      return null;\n    }\n    let plus = this.accept(TokenType.plus)\n    let minus = this.accept(TokenType.minus)\n    if (plus != null) {\n      node.children.push(val, plus, this.expr())\n      return node;\n    }\n    if (minus != null) {\n      node.children.push(val, minus, this.expr())\n      return node;\n    }\n    node.children.push(val)\n    return node;\n  }\n}\n\nexport { ParseTreeSymbol, ParseTreeNode }\nexport default SyntaxAnalysis;","import ErrorTable from \"../Tables/ErrorTable\";\nimport SymbolTable, { SymbolType, Symbol } from \"../Tables/SymbolTable\";\nimport Token from \"../Token/Token\";\nimport TokenType from \"../Token/TokenType\";\nimport { ParseTreeSymbol, ParseTreeNode } from \"./SyntaxAnalysis\";\n\nenum AstNodeType {\n  program, floatdcl, intdcl, assign, plus, minus, print, id, inum, fnum, int2float, error\n}\n\nclass AstNode {\n  type: AstNodeType;\n  value: string;\n  name: string;\n  children: Array<AstNode> = []\n\n  constructor(type: AstNodeType, value: string = \"\") {\n    this.type = type;\n    this.value = value;\n    this.name = AstNodeType[type] + \" -> \" + value;\n  }\n}\n\nclass SemanticAnalysis {\n\n  input: ParseTreeNode;\n  symbolTable: SymbolTable;\n  errorTable: ErrorTable;\n\n  constructor(input: ParseTreeNode, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.input = input;\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n  }\n\n  run() {\n    const root = new AstNode(AstNodeType.program, \"program\")\n    root.children = root.children.concat(this.dcls(this.input.children[0]), this.stmts(this.input.children[1]));\n    return root;\n  }\n\n  symbolTableOrError(name: string, token: Token): Symbol | null {\n    const symbol = this.symbolTable.get(name)\n    if (!symbol) {\n      this.errorTable.add(token, `Variable '${name}' was not defined.`)\n      return null;\n    }\n    return symbol;\n  }\n\n  dcls(node: ParseTreeNode): Array<AstNode> {\n    let children: Array<AstNode> = []\n    for (let i = 0; i < node.children.length; i++) {\n      const curr = node.children[i];\n      if (curr.symbol == ParseTreeSymbol.Dcls) {\n        children = children.concat(this.dcls(curr))\n      }\n      else if (curr.symbol == ParseTreeSymbol.Dcl) {\n        children.push(this.dcl(curr))\n      }\n    }\n    return children;\n  }\n\n  dcl(node: ParseTreeNode): AstNode {\n    if (node.children[0].token!.type == TokenType.floatdcl) {\n      return new AstNode(AstNodeType.floatdcl, node.children[1].children[0].name)\n    }\n    return new AstNode(AstNodeType.intdcl, node.children[1].children[0].name)\n  }\n\n  stmts(node: ParseTreeNode): Array<AstNode> {\n    let children: Array<AstNode> = []\n    for (let i = 0; i < node.children.length; i++) {\n      const curr = node.children[i];\n      if (curr.symbol == ParseTreeSymbol.Stmts) {\n        children = children.concat(this.stmts(curr))\n      }\n      else if (curr.symbol == ParseTreeSymbol.Stmt) {\n        children.push(this.stmt(curr))\n      }\n    }\n    return children;\n  }\n\n  stmt(node: ParseTreeNode): AstNode {\n    const name = node.children[0].children[0].name;\n    if (node.children[0].token!.type == TokenType.id) {\n      const symbol = this.symbolTableOrError(name, node.children[0].token!);\n      if (!symbol) {\n        return new AstNode(AstNodeType.error, \"error\")\n      }\n      const astNode = new AstNode(AstNodeType.assign, SymbolType[symbol!.type]);\n      const child = new AstNode(AstNodeType.id, name)\n      astNode.children = [child, this.expr(node.children[2], symbol!.type)]\n      return astNode;\n    }\n    return new AstNode(AstNodeType.print, name)\n  }\n\n  convertType(node: ParseTreeNode, op: SymbolType.float | SymbolType.int) {\n    const tokenType = node.children[0].children[0].token!.type;\n    const data = node.children[0].children[0].token!.data;\n    const symbol = this.symbolTable.get(data)\n    if (op == SymbolType.float && (tokenType == TokenType.fnum || symbol?.type == SymbolType.float)) {\n      return new AstNode(AstNodeType.fnum, node.children[0].children[0].token!.data)\n    }\n    else if (op == SymbolType.int && (tokenType == TokenType.inum || symbol?.type == SymbolType.int)) {\n      return new AstNode(AstNodeType.inum, node.children[0].children[0].token!.data)\n    }\n    else if (op == SymbolType.float && (tokenType == TokenType.inum || symbol?.type == SymbolType.int)) {\n      const parent = new AstNode(AstNodeType.int2float, \"float\")\n      parent.children.push(new AstNode(AstNodeType.inum, node.children[0].children[0].token!.data))\n      return parent;\n    }\n    this.errorTable.add(node.children[0].children[0].token!, \"Float can't be converted to integer\")\n    const parent = new AstNode(AstNodeType.error, \"error\")\n    parent.children.push(new AstNode(AstNodeType.fnum, node.children[0].children[0].token!.data))\n    return parent;\n  }\n\n  expr(node: ParseTreeNode, op: SymbolType.float | SymbolType.int): AstNode {\n    if (node.children.length == 1) {\n      return this.convertType(node, op)\n    }\n    let currNode: AstNode;\n    if (node.children[1].token!.type == TokenType.plus) {\n      currNode = new AstNode(AstNodeType.plus, SymbolType[op]);\n    }\n    else {\n      currNode = new AstNode(AstNodeType.minus, SymbolType[op]);\n    }\n    currNode.children.push(this.convertType(node, op), this.expr(node.children[2], op))\n    return currNode;\n  }\n}\n\nexport { AstNode }\nexport default SemanticAnalysis;","import TokenType from '../Token/TokenType';\nimport Token from '../Token/Token';\nimport ErrorTable from '../Tables/ErrorTable';\nimport SymbolTable from '../Tables/SymbolTable';\nimport SyntaxAnalysis, { ParseTreeNode } from './SyntaxAnalysis';\nimport SemanticAnalysis, { AstNode } from './SemanticAnalysis';\n\nclass TreeNode {\n  name: string;\n  children: Array<any> = [];\n  constructor(name: string) { this.name = name; }\n}\n\nclass Parser {\n\n  symbolTable: SymbolTable;\n  errorTable: ErrorTable;\n  parseTree: ParseTreeNode;\n  ast: AstNode;\n\n  constructor(input: Array<Token>, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n    this.parseTree = new SyntaxAnalysis(input, this.symbolTable, this.errorTable).run();\n    this.ast = new SemanticAnalysis(this.parseTree, this.symbolTable, this.errorTable).run();\n  }\n}\n\nexport default Parser;","import TokenType from '../Token/TokenType';\nimport Token from '../Token/Token';\nimport ErrorTable from '../Tables/ErrorTable';\nimport SymbolTable from '../Tables/SymbolTable';\n\nclass LexItem {\n  regex;\n  tokenType;\n  constructor(regex: RegExp, tokenType: TokenType) {\n    this.regex = regex;\n    this.tokenType = tokenType;\n  }\n}\n\nclass Scanner {\n  input: string\n  symbolTable: SymbolTable\n  errorTable: ErrorTable;\n\n  lexDefinition: { [key: string]: LexItem } = {\n    \"floatDcl\": new LexItem(/^f/, TokenType.floatdcl),\n    \"intDcl\": new LexItem(/^i/, TokenType.intdcl),\n    \"print\": new LexItem(/^p/, TokenType.print),\n    \"id\": new LexItem(/^([a-e]|[g-h]|[j-o]|[q-z])/, TokenType.id),\n    \"assign\": new LexItem(/^=/, TokenType.assign),\n    \"plus\": new LexItem(/^\\+/, TokenType.plus),\n    \"minus\": new LexItem(/^-/, TokenType.minus),\n    \"fNum\": new LexItem(/^[0-9]+\\.[0-9]+/, TokenType.fnum),\n    \"iNum\": new LexItem(/^[0-9]+/, TokenType.inum),\n    \"blank\": new LexItem(/^( |\\t)+/, TokenType.blank),\n    \"newLine\": new LexItem(/^(\\r\\n|\\n|\\r)/, TokenType.newline),\n  }\n\n  output: Array<Token> = [];\n\n  constructor(input: string, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.input = input;\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n  }\n\n  test(input: string, start: number, line: number): Token | null {\n    for (let key in this.lexDefinition) {\n      let value = this.lexDefinition[key].regex.exec(input);\n      if (value != null) {\n        return new Token(this.lexDefinition[key].tokenType, value[0], start, start + value[0].length, line)\n      }\n    }\n    return null;\n  }\n\n  run(): Array<Token> {\n    let length = 0;\n    let data = this.input;\n    let error = false;\n    let start = 0;\n    let currentLine = 0;\n    while (data.length > 0) {\n      let token = this.test(data, start, currentLine)\n      if (token == null) {\n        error = true;\n        let errorLength = 0;\n        let errorString = \"\";\n        let escapeToken = null;\n        do {\n          errorLength += 1;\n          errorString += data[0];\n          start += 1\n          data = data.substr(1);\n          escapeToken = this.test(data, start, currentLine)\n        } while (escapeToken == null && data.length > 0);\n        const errorToken = new Token(TokenType.error, errorString, start - errorLength, start, currentLine);\n        this.errorTable.add(errorToken, \"Token: \\\"\" + errorString + \"\\\" not recognized\");\n        token = escapeToken;\n        this.output.push(errorToken)\n      }\n      else {\n        data = data.substr(token.data.length);\n        start += token.data.length;\n        if (token.type == TokenType.newline) {\n          currentLine += 1\n          start = 0\n        }\n        else if (token.type != TokenType.blank) {\n          this.output.push(token);\n        }\n      }\n\n    }\n    this.output.push(new Token(TokenType.eof, \"\", start, start, currentLine));\n    return this.output;\n  }\n}\n\nexport default Scanner;","import Token from '../Token/Token';\n\nclass ErrorItem {\n  token: Token\n  message: string\n  constructor(token: Token, message: string) {\n    this.token = token;\n    this.message = message;\n  }\n  compareTo(item: ErrorItem): number {\n    if (this.token.line < item.token.line && this.token.start < item.token.start) {\n      return -1;\n    }\n    else if (this.token.line == item.token.line && this.token.start == item.token.start) {\n      return 0;\n    }\n    return 1;\n  }\n  toString(): string {\n    return \"Token: \" + this.token.toString() + \" Message: \" + this.message\n  }\n}\n\nclass ErrorTable {\n  errors: Array<ErrorItem> = [];\n  length: number = 0;\n\n  add(token: Token, message: string) {\n    this.errors.push(new ErrorItem(token, message));\n    this.length += 1;\n  }\n  sort() {\n    this.errors.sort((a, b) => a.compareTo(b))\n  }\n\n  toString(): string {\n    if (this.length == 0) {\n      return \"No errors!\"\n    }\n    let str = `ErrorTable { \\n\\tlength: ${this.length}\\n\\terrors:`\n    for (let i = 0; i < this.errors.length; i++) {\n      str += `\\n\\t\\t ${this.errors[i].toString()}`\n    }\n    return str + \"\\n }\"\n  }\n\n}\n\nexport default ErrorTable;","import Parser from './Parser/Parser'\nimport { ParseTreeNode } from './Parser/SyntaxAnalysis';\nimport Scanner from './Scanner/Scanner'\nimport ErrorTable from './Tables/ErrorTable';\nimport SymbolTable from './Tables/SymbolTable';\n\nclass Compiler {\n  errorTable: ErrorTable = new ErrorTable();\n  symbolTable: SymbolTable = new SymbolTable();\n  input: string;\n  parser: Parser;\n\n  constructor(input: string) {\n    this.input = input;\n    let tokens = new Scanner(this.input, this.symbolTable, this.errorTable).run();\n    this.parser = new Parser(tokens, this.symbolTable, this.errorTable);\n  }\n}\n\nexport default Compiler;","import React from 'react';\nimport { Preloader } from 'react-materialize';\nimport \"./Loader.scss\"\n\nfunction Loader() {\n  return (\n    <div id=\"Loader\">\n      <Preloader\n        active\n        color=\"blue\"\n        flashing\n      />\n    </div>\n  )\n}\n\nexport default Loader;","import React from 'react';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css'\nimport '../node_modules/materialize-css/dist/js/materialize.min.js'\nimport './App.scss';\nimport CodeEditor from './components/CodeEditor/CodeEditor';\nimport Navbar from './components/Navbar/Navbar';\nimport OutputViewer from './components/OutputViewer/OutputViewer';\nimport Compiler from './compiler/Compiler';\nimport Loader from './components/Loader/Loader';\n\nfunction App() {\n  const [loading, setLoading] = React.useState(false);\n  const [code, setCode] = React.useState<string>(\"fbiaa=5b=a+3.2pb\");\n  const [compiler, setCompiler] = React.useState<Compiler>(new Compiler(\"fbiaa=5b=a+3.2pb\"));\n\n  const exec = () => {\n    setLoading(true);\n    setCompiler(new Compiler(code));\n    setLoading(false);\n  }\n\n  const upload = (e: any) => {\n    //  e.target.files[0].type  e.target.files[0].size\n    const fr = new FileReader();\n    fr.onloadend = (e) => {\n      if (fr.result) {\n        setCode(fr.result.toString())\n      }\n      else {\n        setCode(\"\")\n      }\n    }\n    fr.readAsText(e.target.files[0])\n  }\n\n  return (\n    <div className=\"App\">\n      { loading && <Loader />}\n      <Navbar exec={exec} uploadCode={upload} />\n      <div className=\"row\">\n        <div className=\"col s12 m6\"><CodeEditor code={code} setCode={setCode} /></div>\n        <div className=\"col s12 m6\"><OutputViewer compiler={compiler} /></div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}