{"version":3,"sources":["components/CodeEditor/utils/HighlightRules.ts","components/CodeEditor/CodeEditor.tsx","components/Navbar/Navbar.tsx","components/OutputViewer/Viewers/TreeViewer/TreeViewer.tsx","components/OutputViewer/Viewers/ErrorViewer/ErrorViewer.tsx","compiler/Tables/SymbolTable.ts","components/OutputViewer/Viewers/SymbolTableViewer/SymbolTableViewer.tsx","components/OutputViewer/Viewers/Instructions/Instructions.tsx","components/OutputViewer/OutputViewer.tsx","compiler/Token/TokenType.ts","compiler/Parser/SyntaxAnalysis.ts","compiler/Token/Token.ts","compiler/Parser/SemanticAnalysis.ts","compiler/Parser/Parser.ts","compiler/Scanner/Scanner.ts","compiler/Tables/ErrorTable.ts","compiler/Translation/Translation.ts","compiler/Compiler.ts","components/Loader/Loader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomHighlightRules","$rules","start","token","regex","ace","require","TextHighlightRules","CustomSyntaxMode","HighlightRules","Mode","CodeEditor","props","refEditor","React","useRef","useEffect","customMode","current","editor","getSession","setMode","className","ref","placeholder","mode","theme","value","code","onChange","setCode","name","editorProps","$blockScrolling","height","width","options","draggable","edge","Navbar","alignLinks","brand","href","menuIcon","onClick","exec","type","uploadCode","id","htmlFor","last","k","x","y","drag_handler","d3","on","event","boxLimit","dx","dy","this","attr","zoom_handler","transform","TreeViewer","refDiv","margin","nodeData","tree","size","rate","nodes","treemap","i","children","length","removeChild","g","append","selectAll","data","descendants","slice","enter","d","parent","node","style","text","ErrorViewer","SymbolType","errorTable","errors","map","error","message","line","Symbol","declaration","SymbolTable","key","SymbolTableViewer","symbolTable","Object","keys","Instructions","plugins","gfm","tabsOptions","swipeable","duration","onShow","responsiveThreshold","Infinity","instructionsDefault","padding","title","OutputViewer","TokenType","prettyObject","obj","JSON","stringify","compiler","parseTree","parser","ast","active","disabled","target","translator","output","ParseTreeSymbol","Token","end","AstNodeType","ParseTreeNode","symbol","SyntaxAnalysis","input","currentToken","reverse","pop","eof","symbolType","existing","get","add","curr","push","next","val","accept","prog","subtree1","dcls","subtree2","stmts","expect","Prog","dcltree","dcl","empty","dclstree","Dcls","Dcl","floatdcl","checkIfDeclaration","float","intdcl","int","stmtree","stmt","stmtstree","Stmts","Stmt","idtree","assign","expr","print","inum","fnum","Val","Expr","plus","minus","AstNode","SemanticAnalysis","root","program","concat","symbolTableOrError","astNode","child","op","tokenType","int2float","convertType","currNode","Parser","run","LexItem","Scanner","lexDefinition","blank","newline","currentLine","test","errorLength","errorString","escapeToken","substr","errorToken","ErrorItem","item","toString","ErrorTable","sort","a","b","compareTo","str","Translation","comments","status","comment","write","ch","calculation","getValue","resetOperation","toFloat","idValue","valueNode","Compiler","tokens","Loader","color","flashing","App","useState","loading","setLoading","setCompiler","e","fr","FileReader","onloadend","result","readAsText","files","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbe7f656.chunk.js","sourcesContent":["import \"ace-builds/src-noconflict/mode-java\";\nimport ace from \"ace-builds\"\n\nexport class CustomHighlightRules extends ace.require(\n  \"ace/mode/text_highlight_rules\"\n).TextHighlightRules {\n\n  constructor() {\n    super();\n    this.$rules = {\n      start: [\n        {\n          token: \"keyword\", // declarations\n          regex: \"(f|i|p)\"\n        },\n        {\n          token: \"constant.language.boolean\", // id\n          regex: /([a-e]|[g-h]|[j-o]|[q-z]){1}/\n        },\n        {\n          token: \"constant.numeric\", // float\n          regex: /[0-9]+\\.[0-9]+/\n        },\n        {\n          token: \"constant.numeric\", // int\n          regex: /[0-9]+/\n        },\n        {\n          token: \"string\",\n          regex: /(=|\\+|-){1}/\n        }\n      ]\n    };\n  }\n}\n\nexport default class CustomSyntaxMode extends ace.require(\"ace/mode/java\")\n  .Mode {\n  constructor() {\n    super();\n    this.HighlightRules = CustomHighlightRules;\n  }\n}","import React from 'react';\nimport './CodeEditor.css';\nimport AceEditor from \"react-ace\";\nimport CustomSyntaxMode from \"./utils/HighlightRules\";\n\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\ninterface CodeEditorProps {\n  code: string, setCode: any\n}\n\nfunction CodeEditor(props: CodeEditorProps) {\n  const refEditor = React.useRef<AceEditor>(null);\n  React.useEffect(() => {\n    const customMode = new CustomSyntaxMode();\n    if (refEditor.current != null) {\n      refEditor.current.editor.getSession().setMode(customMode as any);\n    }\n  })\n  return (\n    <div className=\"CodeEditor\">\n      <AceEditor\n        ref={refEditor}\n        placeholder=\"Please enter your code! :)\"\n        mode=\"javascript\"\n        theme=\"monokai\"\n        value={props.code}\n        onChange={value => props.setCode(value)}\n        name=\"editor\"\n        editorProps={{ $blockScrolling: true }}\n        height=\"100%\"\n        width=\"100%\"\n      />\n    </div>\n  );\n}\n\nexport default CodeEditor;\n","import React from 'react';\nimport './Navbar.scss';\nimport { Navbar as Nav, NavItem, Icon, NavbarAlignment } from 'react-materialize';\n\nconst options = {\n    draggable: true,\n    edge: \"left\" as NavbarAlignment\n}\n\ninterface NavbarProps {\n    exec: any, uploadCode: any\n}\n\nfunction Navbar(props: NavbarProps) {\n    return (\n        <Nav\n            alignLinks=\"right\"\n            brand={<a href=\"#\">Simple Addition Calculator</a>}\n            menuIcon={<Icon>menu</Icon>}\n            options={options}\n            className=\"Navbar\"\n        >\n            <NavItem href=\"#\" onClick={props.exec}>\n                <Icon>refresh</Icon>\n            </NavItem>\n            <NavItem href=\"#\">\n                <input type=\"file\" onChange={props.uploadCode} id=\"file_upload\" />\n                <label htmlFor=\"file_upload\"><Icon>cloud_upload</Icon></label>\n            </NavItem>\n        </Nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport \"./TreeViewer.scss\";\n\ninterface TreeViewerProps {\n  tree: any;\n  rate: number;\n}\n\nlet last = { k: 1, x: 0, y: 40 }\n\nconst drag_handler = d3.drag()\n  .on(\"drag\", function (event: any) {\n    const boxLimit = 2000 * last.k;\n    if (last.x < boxLimit && last.x > -boxLimit || (last.x >= boxLimit && event.dx < 0) || (last.x <= -boxLimit && event.dx > 0)) {\n      last.x += event.dx\n    }\n    else {\n      last.x = last.x > 0 ? boxLimit : -boxLimit;\n    }\n    if (last.y < boxLimit && last.y > -boxLimit || (last.y >= boxLimit && event.dy < 0) || (last.y <= -boxLimit && event.dy > 0)) {\n      last.y += event.dy\n    }\n    else {\n      last.y = last.y > 0 ? boxLimit : -boxLimit;\n    }\n    d3.select(this)\n      .attr(\"transform\",\n        \"translate(\" + last.x + \",\" + last.y + \") scale(\" + last.k + \")\");\n  });\n\nconst zoom_handler = d3.zoom()\n  .on(\"zoom\", function ({ transform }) {\n    last.k = transform.k;\n    d3.select(this)\n      .attr(\"transform\",\n        \"translate(\" + last.x + \",\" + last.y + \") scale(\" + last.k + \")\");\n  })\n\nfunction TreeViewer(props: TreeViewerProps) {\n  const refDiv = React.useRef<HTMLDivElement>(null);\n  React.useEffect(() => {\n    last = { k: 1, x: 0, y: 40 }\n    const margin = { top: 40, right: 0, bottom: 0, left: 0 };\n    const nodeData = d3.hierarchy(props.tree)\n    const size = { x: nodeData.height * props.rate, y: nodeData.height * props.rate / 1.8 };\n    const treemap = d3.tree().size([size.x, size.y])\n    const nodes = treemap(nodeData);\n    if (refDiv.current != null) {\n      for (let i = 0; i < refDiv.current.children.length; i++) {\n        refDiv.current.removeChild(refDiv.current.children[i])\n      }\n      let svg = d3.select(refDiv.current).append(\"svg\").attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n      let g = svg.append(\"g\").attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .attr(\"cursor\", \"grab\");\n\n      g.append(\"rect\")\n        .attr(\"x\", \"-2000\")\n        .attr(\"y\", \"-2000\")\n        .attr(\"width\", \"5000\")\n        .attr(\"height\", \"5000\")\n        .attr(\"fill\", \"#fafafa\")\n        .attr(\"stroke\", \"black\")\n\n      g.selectAll(\".link\")\n        .data(nodes.descendants().slice(1))\n        .enter().append(\"path\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", d => \"M\" + d.x + \",\" + d.y\n          + \"L\" + d.parent!.x + \",\" + d.parent!.y);\n\n      // adds each node as a group\n      let node = g.selectAll(\".node\")\n        .data(nodes.descendants())\n        .enter().append(\"g\")\n        .attr(\"class\", function (d) {\n          return \"node\" +\n            (d.children ? \" node--internal\" : \" node--leaf\");\n        })\n        .attr(\"transform\", d => \"translate(\" + d.x + \",\" + d.y + \")\");\n\n      // adds the circle to the node\n      node.append(\"circle\")\n        .attr(\"r\", 12);\n\n      // adds the text to the node\n      node.append(\"text\")\n        .attr(\"dy\", \".35em\")\n        .attr(\"y\", d => d.children ? -20 : 20)\n        .style(\"text-anchor\", \"middle\")\n        .text((d: any) => d.data.name);\n\n      drag_handler(g as any);\n      zoom_handler(g as any);\n\n    }\n  }\n  )\n\n  return (\n    <div ref={refDiv} style={{ height: \"100%\" }}>\n\n    </div>\n  )\n\n}\n\nexport default TreeViewer","import React from 'react';\nimport { Collection, CollectionItem, Icon } from 'react-materialize';\nimport ErrorTable from '../../../../compiler/Tables/ErrorTable';\n\ninterface ErrorViewerProps {\n  errorTable: ErrorTable,\n}\n\nfunction ErrorViewer(props: ErrorViewerProps) {\n\n  return (\n    <Collection>\n      {props.errorTable.errors.map(error => (\n        <CollectionItem key={error.message}>\n          <span className=\"title\">\n            <b>{error.message}</b>\n          </span>\n          <p style={{ margin: 0 }}>\n            <b>Line: </b> {error.token.line}\n            <br />\n            <b>Start: </b> {error.token.start}\n            <br />\n            <b>Value: </b> {error.token.data}\n          </p>\n        </CollectionItem>\n      ))}\n      {props.errorTable.length == 0 && (\n        <CollectionItem >\n          <span className=\"title\">\n            <b>No errors!</b>\n          </span>\n        </CollectionItem>\n      )}\n    </Collection >\n  )\n}\n\nexport default ErrorViewer;","enum SymbolType {\n  float, int\n}\nclass Symbol {\n  name: string\n  type: SymbolType\n  declaration: { start: number, line: number }\n\n  constructor(name: string, type: SymbolType, declaration: { start: number, line: number }) {\n    this.name = name;\n    this.type = type;\n    this.declaration = declaration;\n  }\n}\n\nclass SymbolTable {\n  data: { [key: string]: Symbol } = {}\n  length: number = 0;\n\n  addValue(key: string, value: Symbol) {\n    this.data[key] = value;\n    this.length += 1\n  }\n\n  add(name: string, type: SymbolType, declaration: { start: number, line: number }) {\n    this.data[name] = new Symbol(name, type, declaration);\n    this.length += 1\n  }\n\n  get(key: string): Symbol | null {\n    return this.data[key];\n  }\n}\n\nexport { SymbolType, Symbol };\nexport default SymbolTable;","import React from 'react';\nimport { Collection, CollectionItem } from 'react-materialize';\nimport SymbolTable, { SymbolType } from '../../../../compiler/Tables/SymbolTable';\n\ninterface ErrorViewerProps {\n  symbolTable: SymbolTable,\n}\n\nfunction SymbolTableViewer(props: ErrorViewerProps) {\n  const symbolTable = props.symbolTable.data;\n  return (\n    <Collection>\n      {Object.keys(props.symbolTable.data).map(key => (\n        <CollectionItem key={key}>\n          <span className=\"title\">\n            <b>{symbolTable[key].name}</b>\n          </span>\n          <p style={{ margin: 0 }}>\n            <b>Type: </b> {SymbolType[symbolTable[key].type]}\n            <br />\n            <b>Line: </b> {symbolTable[key].declaration.line} -- <b>Start: </b> {symbolTable[key].declaration.start}\n          </p>\n        </CollectionItem>\n\n      ))}\n      {props.symbolTable.length == 0 && (\n        <CollectionItem >\n          <span className=\"title\">\n            <b>No symbols!</b>\n          </span>\n        </CollectionItem>\n      )}\n    </Collection >\n  )\n}\n\nexport default SymbolTableViewer;","import ReactMarkdown from 'react-markdown';\nimport \"./Instructions.scss\"\nimport gfm from \"remark-gfm\"\n\nconst content = `# Simple compiler\n\nThis is a simple compiler made for my compilers class at Tec de Monterrey\n\n## Tokens\n\n| definition | Terminal  |  Regular expression |\n|---|---|---|\n| float declaration | floatdcl  | \"f\"  |\n| integer declaration | intdcl  |  \"i\" |\n| print | print  | \"p\"  |\n|  id | id|  [a-e]\\\\\\|[g-h]\\\\\\|[j-o]\\\\\\|[q-z]  |\n|  assign | assign | \"=\"  |\n|  plus | plus | \"+\" |\n|  minus | minus | \"-\" |\n|  integer number | inum  | [0-9]+ |\n|  float number | fnum | [0-9]+.[0-9]+  |\n|  blank | blank | (\" \"\\\\\\|\\\\t)+  |\n|  line break | newLine | ( \\\\r\\\\n \\\\\\| \\\\n \\\\\\| \\\\r )  |\n\n## Syntax specification\n\n||||\n|---|---|---|\n|Prog|  -&gt; |Dcls Stmts $\n|Dcls|  -&gt;| Dcl Dcls \\\\\\| λ\n|Dcl|   -&gt;| floatdcl id \\\\\\| intdcl id\n|Stmts| -&gt;| Stmt Stmts \\\\\\| λ\n|Stmt| -&gt; | id assign Expr \\\\\\| print id\n|Expr| -&gt; | Val \\\\\\| Val plus Expr \\\\\\| Val minus Expr\n|Val| -&gt; | id \\\\\\| num \\\\\\| fnum\n\n## Example code input:\n\\`\\`\\`\nfb ia a = 5 b = a + 3.2 pb\n\\`\\`\\`\n\n## How it works\n\nThis is the main view of the site:\n\n![Main view](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/main.png)\n\nThe left panel is the code to enter, you can modify it directly on browser, it will highlight the syntax.\n\nAfter you're happy with your code, just press the refresh button on the top right corner:\n\n![Refresh button](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/refresh.png)\n\nIf everything is okay with the code, it should show no errors and enable Tabs in the right side of the page (If your screen is to small it will show a scrollbar to select hidden tabs):\n\n![No errors](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/no_errors.png)\n\nIn the SYMBOL TABLE tab you can view the detected variables that were declared in your code, and the location of its declaration.\n\n![SYMBOL TABLE tab](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/symbol.png)\n\nIn the PARSE TREE JSON tab, you can see the created json after the Syntax Analyzer that is used in the next tab to represent it visually:\n\n![PARSE TREE JSON](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/parsejson.png)\n\nIn the PARSE TREE VIEWER tab, you can see the tree in a graphical way, you can drag around the canvas and zoom in and out.\n\n![PARSE TREE VIEWER](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/parseview.png)\n\nIn the AST JSON tab, you can see the created json after the Semantic Analyzer that is used in the next tab to represent it visually:\n\n![PARSE TREE JSON](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/astjson.png)\n\nIn the AST VIEWER tab, you can see the tree in a graphical way, you can drag around the canvas and zoom in and out.\n\n![PARSE TREE VIEWER](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/astview.png)\n\nThe last tab is the code translated into Desk calculator language:\n\n![Translation](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/translation.png)\n\nIn case there are any errors on you code then it will show them on the errors tab and disable the other two tabs.\n\n![Errors](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/error.png)\n\nIf you want to upload a file instead of writing it into the text editor, then just click the button next to the refresh one and select the file!\n\n![File upload](https://raw.githubusercontent.com/lima1756/simple_compiler/main/readme_images/upload.png)\n`\n\n\nfunction Instructions() {\n  return (\n    <ReactMarkdown plugins={[gfm]}>\n      {content}\n    </ReactMarkdown>\n  )\n}\n\nexport default Instructions;","import React from 'react';\nimport './OutputViewer.scss'\nimport { Tabs, Tab } from 'react-materialize';\nimport TreeViewer from './Viewers/TreeViewer/TreeViewer';\nimport ErrorViewer from './Viewers/ErrorViewer/ErrorViewer';\nimport SymbolTableViewer from './Viewers/SymbolTableViewer/SymbolTableViewer';\nimport Compiler from '../../compiler/Compiler';\nimport Instructions from './Viewers/Instructions/Instructions'\n\ninterface OutputViewerProps {\n  compiler: Compiler | undefined\n}\n\nconst tabsOptions = { swipeable: false, duration: 300, onShow: () => { }, responsiveThreshold: Infinity };\n\nfunction instructionsDefault() {\n  return (\n    <div className=\"row OutputViewer\" >\n      <div className=\"col s12\" style={{ padding: 0, margin: 0 }}>\n        <Tabs options={tabsOptions}>\n          <Tab title=\"Instructions\">\n            <Instructions />\n          </Tab>\n        </Tabs>\n      </div>\n    </div>)\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const prettyObject = (obj: any) => {\n    return JSON.stringify(obj, null, 2);\n  }\n\n  if (!props.compiler) {\n    return instructionsDefault();\n  }\n  const errorTable = props.compiler.errorTable;\n  const symbolTable = props.compiler.symbolTable;\n  const parseTree = props.compiler.parser.parseTree;\n  const ast = props.compiler.parser.ast;\n  const display = errorTable != null && symbolTable != null;\n  if (!display) {\n    return instructionsDefault();\n  }\n  const errors = errorTable!.length != 0;\n  return (\n    <div className=\"row OutputViewer\" >\n      <div className=\"col s12\" style={{ padding: 0, margin: 0 }}>\n        <Tabs options={tabsOptions}>\n          <Tab title=\"Instructions\">\n            <Instructions />\n          </Tab>\n          <Tab title=\"Error/warnings\" active={errors}>\n            <ErrorViewer errorTable={errorTable!} />\n          </Tab>\n          <Tab title=\"Symbol table\" disabled={errors}>\n            <SymbolTableViewer symbolTable={symbolTable} />\n          </Tab>\n          <Tab title=\"Parse Tree JSON\" disabled={errors}>\n            {!errors && <pre>{prettyObject(parseTree)}</pre>}\n          </Tab>\n          <Tab title=\"Parse Tree Viewer\" disabled={errors}>\n            {!errors && <TreeViewer tree={parseTree} rate={150} />}\n          </Tab>\n          <Tab title=\"AST JSON\" disabled={errors}>\n            {!errors && <pre>{prettyObject(ast)}</pre>}\n          </Tab>\n          <Tab title=\"AST Viewer\" disabled={errors} >\n            {!errors && <TreeViewer tree={ast} rate={200} />}\n          </Tab>\n          <Tab title=\"Translation\" disabled={errors} >\n            <h1>\n              Output program for &nbsp;\n              <a href=\"https://en.wikipedia.org/wiki/Dc_(computer_program)\" target=\"_blank\">\n                Desk calculator\n              </a>\n            </h1>\n            <code>{props.compiler.translator.output}</code>\n          </Tab>\n        </Tabs>\n      </div>\n    </div>\n  );\n\n\n\n}\n\nexport default OutputViewer;\n","enum TokenType {\n  floatdcl, intdcl, print, id, assign, plus, minus, inum, fnum, blank, error, newline, eof\n}\n\nexport default TokenType;","import TokenType from '../Token/TokenType';\nimport Token from '../Token/Token';\nimport ErrorTable from '../Tables/ErrorTable';\nimport SymbolTable, { SymbolType } from '../Tables/SymbolTable';\n\nenum ParseTreeSymbol {\n  Prog, Dcls, Dcl, Stmts, Stmt, Expr, Val, empty\n}\n\nclass ParseTreeNode {\n  name: string;\n  token: Token | null;\n  symbol: ParseTreeSymbol | null;\n  children: Array<ParseTreeNode> = [];\n  constructor(name: string, token: Token | null = null, symbol: ParseTreeSymbol | null = null) {\n    this.name = name;\n    this.token = token;\n    this.symbol = symbol;\n  }\n}\n\nclass SyntaxAnalysis {\n\n  input: Array<Token>;\n  currentToken: Token;\n  symbolTable: SymbolTable;\n  errorTable: ErrorTable;\n\n  constructor(input: Array<Token>, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.input = input.reverse();\n    this.currentToken = this.input.pop() || new Token(TokenType.eof, \"\", 0, 0, 0);\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n  }\n\n  checkIfDeclaration(symbolType: SymbolType): void {\n    const value = this.currentToken.data;\n    const existing = this.symbolTable.get(value);\n    if (existing) {\n      this.errorTable.add(this.currentToken, `The id ${value} was already declared in line ${existing.declaration.line} position: ${existing.declaration.start}`)\n      return;\n    }\n    this.symbolTable.add(value, symbolType, { line: this.currentToken.line, start: this.currentToken.start })\n  }\n\n  next(): void {\n    this.currentToken = this.input.pop()!;\n  }\n\n  accept(type: TokenType): ParseTreeNode | null {\n    if (this.currentToken && this.currentToken.type == type) {\n      const curr = new ParseTreeNode(TokenType[type], this.currentToken);\n      curr.children.push(new ParseTreeNode(this.currentToken.data));\n      this.next();\n      return curr;\n    }\n    return null;\n  }\n\n  error(message: string) {\n    this.errorTable.add(this.currentToken, message + \" but got: \" + this.currentToken.data);\n  }\n\n  expect(type: TokenType): ParseTreeNode | null {\n    const val = this.accept(type)\n    if (val != null) {\n      return val;\n    }\n    this.error(\"Expecting token: \" + TokenType[type]);\n    return null;\n  }\n\n  run(): ParseTreeNode {\n    return this.prog();\n  }\n\n  prog(): any {\n    let subtree1 = this.dcls();\n    let subtree2 = this.stmts();\n    this.expect(TokenType.eof);\n    let node = new ParseTreeNode(\"Prog\", null, ParseTreeSymbol.Prog);\n    node.children.push(subtree1, subtree2, new ParseTreeNode(\"$\"))\n    return node;\n  }\n\n  dcls(): any {\n    let dcltree = this.dcl();\n    if (dcltree == null) {\n      return new ParseTreeNode(\"λ\", null, ParseTreeSymbol.empty);\n    }\n    let dclstree = this.dcls()\n    let node = new ParseTreeNode(\"Dcls\", null, ParseTreeSymbol.Dcls)\n    node.children.push(dcltree, dclstree);\n    return node;\n  }\n\n  dcl(): any {\n    let node = new ParseTreeNode(\"Dcl\", null, ParseTreeSymbol.Dcl)\n    let val = this.accept(TokenType.floatdcl)\n    if (val != null) {\n      this.checkIfDeclaration(SymbolType.float);\n      let id = this.expect(TokenType.id)\n      if (id == null) { return null; }\n      node.children.push(val, id)\n      return node\n    }\n    val = this.accept(TokenType.intdcl)\n    if (val != null) {\n      this.checkIfDeclaration(SymbolType.int);\n      let id = this.expect(TokenType.id)\n      if (id == null) { return null; }\n      node.children.push(val, id)\n      return node\n    }\n    return null;\n  }\n\n  stmts(): any {\n    let stmtree = this.stmt();\n    if (stmtree == null) {\n      return new ParseTreeNode(\"λ\", null, ParseTreeSymbol.empty);\n    }\n    let stmtstree = this.stmts()\n    let node = new ParseTreeNode(\"Stmts\", null, ParseTreeSymbol.Stmts)\n    node.children.push(stmtree, stmtstree);\n    return node;\n  }\n\n  stmt(): any {\n    let node = new ParseTreeNode(\"Stmt\", null, ParseTreeSymbol.Stmt)\n    let idtree = this.accept(TokenType.id)\n    if (idtree != null) {\n      let assign = this.expect(TokenType.assign);\n      if (assign == null) {\n        return null;\n      }\n      let expr = this.expr();\n      if (expr == null) {\n        return null;\n      }\n      node.children.push(idtree, assign, expr);\n      return node;\n    }\n    let print = this.accept(TokenType.print)\n    if (print != null) {\n      let id = this.expect(TokenType.id);\n      if (id == null) {\n        return null;\n      }\n      node.children.push(print, id)\n      return node\n    }\n    return null;\n  }\n\n  val(): any {\n    let id = this.accept(TokenType.id);\n    let inum = this.accept(TokenType.inum);\n    let fnum = this.accept(TokenType.fnum)\n    let node = new ParseTreeNode(\"Val\", null, ParseTreeSymbol.Val)\n    if (id != null) {\n      node.children.push(id)\n      return node;\n    }\n    if (inum != null) {\n      node.children.push(inum)\n      return node;\n    }\n    if (fnum != null) {\n      node.children.push(fnum)\n      return node;\n    }\n    this.error(\"Expecting a value (id, integer, float)\");\n    return null;\n  }\n\n  expr(): any {\n    let node = new ParseTreeNode(\"Expr\", null, ParseTreeSymbol.Expr)\n    let val = this.val();\n    if (val == null) {\n      return null;\n    }\n    let plus = this.accept(TokenType.plus)\n    let minus = this.accept(TokenType.minus)\n    if (plus != null) {\n      node.children.push(val, plus, this.expr())\n      return node;\n    }\n    if (minus != null) {\n      node.children.push(val, minus, this.expr())\n      return node;\n    }\n    node.children.push(val)\n    return node;\n  }\n}\n\nexport { ParseTreeSymbol, ParseTreeNode }\nexport default SyntaxAnalysis;","import TokenType from './TokenType';\n\nclass Token {\n  type: TokenType;\n  data: string;\n  start: number;\n  end: number;\n  line: number;\n\n  constructor(type: TokenType, data: string, start: number, end: number, line: number) {\n    this.type = type;\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n  }\n\n  toString(): string {\n    return `Token {type: ${TokenType[this.type]} data: ${this.data} start: ${this.start} end: ${this.end} line: ${this.line}}`\n  }\n}\n\nexport default Token;","import ErrorTable from \"../Tables/ErrorTable\";\nimport SymbolTable, { SymbolType, Symbol } from \"../Tables/SymbolTable\";\nimport Token from \"../Token/Token\";\nimport TokenType from \"../Token/TokenType\";\nimport { ParseTreeSymbol, ParseTreeNode } from \"./SyntaxAnalysis\";\n\nenum AstNodeType {\n  program, floatdcl, intdcl, assign, plus, minus, print, id, inum, fnum, int2float, error\n}\n\nclass AstNode {\n  type: AstNodeType;\n  value: string;\n  name: string;\n  children: Array<AstNode> = []\n\n  constructor(type: AstNodeType, value: string = \"\") {\n    this.type = type;\n    this.value = value;\n    this.name = AstNodeType[type] + \" -> \" + value;\n  }\n}\n\nclass SemanticAnalysis {\n\n  input: ParseTreeNode;\n  symbolTable: SymbolTable;\n  errorTable: ErrorTable;\n\n  constructor(input: ParseTreeNode, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.input = input;\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n  }\n\n  run() {\n    const root = new AstNode(AstNodeType.program, \"program\")\n    root.children = root.children.concat(this.dcls(this.input.children[0]), this.stmts(this.input.children[1]));\n    return root;\n  }\n\n  symbolTableOrError(name: string, token: Token): Symbol | null {\n    const symbol = this.symbolTable.get(name)\n    if (!symbol) {\n      this.errorTable.add(token, `Variable '${name}' was not defined.`)\n      return null;\n    }\n    return symbol;\n  }\n\n  dcls(node: ParseTreeNode): Array<AstNode> {\n    let children: Array<AstNode> = []\n    for (let i = 0; i < node.children.length; i++) {\n      const curr = node.children[i];\n      if (curr.symbol == ParseTreeSymbol.Dcls) {\n        children = children.concat(this.dcls(curr))\n      }\n      else if (curr.symbol == ParseTreeSymbol.Dcl) {\n        children.push(this.dcl(curr))\n      }\n    }\n    return children;\n  }\n\n  dcl(node: ParseTreeNode): AstNode {\n    if (node.children[0].token!.type == TokenType.floatdcl) {\n      return new AstNode(AstNodeType.floatdcl, node.children[1].children[0].name)\n    }\n    return new AstNode(AstNodeType.intdcl, node.children[1].children[0].name)\n  }\n\n  stmts(node: ParseTreeNode): Array<AstNode> {\n    let children: Array<AstNode> = []\n    for (let i = 0; i < node.children.length; i++) {\n      const curr = node.children[i];\n      if (curr.symbol == ParseTreeSymbol.Stmts) {\n        children = children.concat(this.stmts(curr))\n      }\n      else if (curr.symbol == ParseTreeSymbol.Stmt) {\n        children.push(this.stmt(curr))\n      }\n    }\n    return children;\n  }\n\n  stmt(node: ParseTreeNode): AstNode {\n    const name = node.children[0].children[0].name;\n    if (node.children[0].token!.type == TokenType.id) {\n      const symbol = this.symbolTableOrError(name, node.children[0].token!);\n      if (!symbol) {\n        return new AstNode(AstNodeType.error, \"error\")\n      }\n      const astNode = new AstNode(AstNodeType.assign, SymbolType[symbol!.type]);\n      const child = new AstNode(AstNodeType.id, name)\n      astNode.children = [child, this.expr(node.children[2], symbol!.type)]\n      return astNode;\n    }\n    return new AstNode(AstNodeType.print, name)\n  }\n\n  convertType(node: ParseTreeNode, op: SymbolType.float | SymbolType.int) {\n    const tokenType = node.children[0].children[0].token!.type;\n    const data = node.children[0].children[0].token!.data;\n    const symbol = this.symbolTable.get(data)\n    if (op == SymbolType.float && tokenType == TokenType.fnum) {\n      return new AstNode(AstNodeType.fnum, node.children[0].children[0].token!.data)\n    }\n    else if (op == SymbolType.float && symbol?.type == SymbolType.float) {\n      return new AstNode(AstNodeType.id, node.children[0].children[0].token!.data)\n    }\n    else if (op == SymbolType.int && tokenType == TokenType.inum) {\n      return new AstNode(AstNodeType.inum, node.children[0].children[0].token!.data)\n    }\n    else if (op == SymbolType.int && symbol?.type == SymbolType.int) {\n      return new AstNode(AstNodeType.id, node.children[0].children[0].token!.data)\n    }\n    else if (op == SymbolType.float && tokenType == TokenType.inum) {\n      const parent = new AstNode(AstNodeType.int2float, \"float\")\n      parent.children.push(new AstNode(AstNodeType.inum, node.children[0].children[0].token!.data))\n      return parent;\n    }\n    else if (op == SymbolType.float && symbol?.type == SymbolType.int) {\n      const parent = new AstNode(AstNodeType.int2float, \"float\")\n      parent.children.push(new AstNode(AstNodeType.id, node.children[0].children[0].token!.data))\n      return parent;\n    }\n    this.errorTable.add(node.children[0].children[0].token!, \"Float can't be converted to integer\")\n    const parent = new AstNode(AstNodeType.error, \"error\")\n    parent.children.push(new AstNode(AstNodeType.fnum, node.children[0].children[0].token!.data))\n    return parent;\n  }\n\n  expr(node: ParseTreeNode, op: SymbolType.float | SymbolType.int): AstNode {\n    if (node.children.length == 1) {\n      return this.convertType(node, op)\n    }\n    let currNode: AstNode;\n    if (node.children[1].token!.type == TokenType.plus) {\n      currNode = new AstNode(AstNodeType.plus, SymbolType[op]);\n    }\n    else {\n      currNode = new AstNode(AstNodeType.minus, SymbolType[op]);\n    }\n    currNode.children.push(this.convertType(node, op), this.expr(node.children[2], op))\n    return currNode;\n  }\n}\n\nexport { AstNode, AstNodeType }\nexport default SemanticAnalysis;","import TokenType from '../Token/TokenType';\nimport Token from '../Token/Token';\nimport ErrorTable from '../Tables/ErrorTable';\nimport SymbolTable from '../Tables/SymbolTable';\nimport SyntaxAnalysis, { ParseTreeNode } from './SyntaxAnalysis';\nimport SemanticAnalysis, { AstNode } from './SemanticAnalysis';\n\nclass TreeNode {\n  name: string;\n  children: Array<any> = [];\n  constructor(name: string) { this.name = name; }\n}\n\nclass Parser {\n\n  symbolTable: SymbolTable;\n  errorTable: ErrorTable;\n  parseTree: ParseTreeNode;\n  ast: AstNode;\n\n  constructor(input: Array<Token>, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n    this.parseTree = new SyntaxAnalysis(input, this.symbolTable, this.errorTable).run();\n    this.ast = new SemanticAnalysis(this.parseTree, this.symbolTable, this.errorTable).run();\n  }\n}\n\nexport default Parser;","import TokenType from '../Token/TokenType';\nimport Token from '../Token/Token';\nimport ErrorTable from '../Tables/ErrorTable';\nimport SymbolTable from '../Tables/SymbolTable';\n\nclass LexItem {\n  regex;\n  tokenType;\n  constructor(regex: RegExp, tokenType: TokenType) {\n    this.regex = regex;\n    this.tokenType = tokenType;\n  }\n}\n\nclass Scanner {\n  input: string\n  symbolTable: SymbolTable\n  errorTable: ErrorTable;\n\n  lexDefinition: { [key: string]: LexItem } = {\n    \"floatDcl\": new LexItem(/^f/, TokenType.floatdcl),\n    \"intDcl\": new LexItem(/^i/, TokenType.intdcl),\n    \"print\": new LexItem(/^p/, TokenType.print),\n    \"id\": new LexItem(/^([a-e]|[g-h]|[j-o]|[q-z])/, TokenType.id),\n    \"assign\": new LexItem(/^=/, TokenType.assign),\n    \"plus\": new LexItem(/^\\+/, TokenType.plus),\n    \"minus\": new LexItem(/^-/, TokenType.minus),\n    \"fNum\": new LexItem(/^[0-9]+\\.[0-9]+/, TokenType.fnum),\n    \"iNum\": new LexItem(/^[0-9]+/, TokenType.inum),\n    \"blank\": new LexItem(/^( |\\t)+/, TokenType.blank),\n    \"newLine\": new LexItem(/^(\\r\\n|\\n|\\r)/, TokenType.newline),\n  }\n\n  output: Array<Token> = [];\n\n  constructor(input: string, symbolTable: SymbolTable, errorTable: ErrorTable) {\n    this.input = input;\n    this.symbolTable = symbolTable;\n    this.errorTable = errorTable;\n  }\n\n  test(input: string, start: number, line: number): Token | null {\n    for (let key in this.lexDefinition) {\n      let value = this.lexDefinition[key].regex.exec(input);\n      if (value != null) {\n        return new Token(this.lexDefinition[key].tokenType, value[0], start, start + value[0].length, line)\n      }\n    }\n    return null;\n  }\n\n  run(): Array<Token> {\n    let data = this.input;\n    let error = false;\n    let start = 0;\n    let currentLine = 0;\n    while (data.length > 0) {\n      let token = this.test(data, start, currentLine)\n      if (token == null) {\n        error = true;\n        let errorLength = 0;\n        let errorString = \"\";\n        let escapeToken = null;\n        do {\n          errorLength += 1;\n          errorString += data[0];\n          start += 1\n          data = data.substr(1);\n          escapeToken = this.test(data, start, currentLine)\n        } while (escapeToken == null && data.length > 0);\n        const errorToken = new Token(TokenType.error, errorString, start - errorLength, start, currentLine);\n        this.errorTable.add(errorToken, \"Token: \\\"\" + errorString + \"\\\" not recognized\");\n        token = escapeToken;\n        this.output.push(errorToken)\n      }\n      else {\n        data = data.substr(token.data.length);\n        start += token.data.length;\n        if (token.type == TokenType.newline) {\n          currentLine += 1\n          start = 0\n        }\n        else if (token.type != TokenType.blank) {\n          this.output.push(token);\n        }\n      }\n\n    }\n    this.output.push(new Token(TokenType.eof, \"\", start, start, currentLine));\n    return this.output;\n  }\n}\n\nexport default Scanner;","import Token from '../Token/Token';\n\nclass ErrorItem {\n  token: Token\n  message: string\n  constructor(token: Token, message: string) {\n    this.token = token;\n    this.message = message;\n  }\n  compareTo(item: ErrorItem): number {\n    if (this.token.line < item.token.line && this.token.start < item.token.start) {\n      return -1;\n    }\n    else if (this.token.line == item.token.line && this.token.start == item.token.start) {\n      return 0;\n    }\n    return 1;\n  }\n  toString(): string {\n    return \"Token: \" + this.token.toString() + \" Message: \" + this.message\n  }\n}\n\nclass ErrorTable {\n  errors: Array<ErrorItem> = [];\n  length: number = 0;\n\n  add(token: Token, message: string) {\n    this.errors.push(new ErrorItem(token, message));\n    this.length += 1;\n  }\n  sort() {\n    this.errors.sort((a, b) => a.compareTo(b))\n  }\n\n  toString(): string {\n    if (this.length == 0) {\n      return \"No errors!\"\n    }\n    let str = `ErrorTable { \\n\\tlength: ${this.length}\\n\\terrors:`\n    for (let i = 0; i < this.errors.length; i++) {\n      str += `\\n\\t\\t ${this.errors[i].toString()}`\n    }\n    return str + \"\\n }\"\n  }\n\n}\n\nexport default ErrorTable;","import { AstNode, AstNodeType } from \"../Parser/SemanticAnalysis\";\n\n\nclass Translation {\n  // Information about the Desk calculator https://en.wikipedia.org/wiki/Dc_(computer_program)\n\n  input: AstNode;\n  output: string = \"\";\n  status: number = 0;\n  comments: boolean;\n\n  constructor(input: AstNode, comments: boolean = false) {\n    this.input = input;\n    this.comments = comments;\n  }\n\n  write(data: string, comment: string = \"\") {\n    this.output += data\n    if (this.comments && comment != \"\") {\n      this.output += \"\\t # \" + comment;\n    }\n    this.output += \"\\n\"\n  }\n\n  run() {\n    this.output = \"\";\n    this.write(\"0 k\", \"Precision to 0 decimal value\")\n    const ch = this.input.children;\n    for (let i = 0; i < ch.length; i++) {\n      switch (ch[i].type) {\n        case AstNodeType.assign:\n          this.assign(ch[i])\n          break;\n        case AstNodeType.print:\n          this.print(ch[i])\n          break;\n      }\n    }\n  }\n\n  assign(node: AstNode) {\n    switch (node.children[1].type) {\n      case AstNodeType.plus:\n        this.calculation(node.children[1])\n        break\n      case AstNodeType.minus:\n        this.calculation(node.children[1])\n        break\n      default:\n        this.getValue(node.children[1]);\n        break\n    }\n    this.write(\"s\" + node.children[0].value, `pop value from stack and write it to register ${node.children[0].value}`)\n    this.resetOperation();\n  }\n\n  getValue(node: AstNode) {\n    let float = false\n    if (node.type == AstNodeType.int2float) {\n      this.toFloat();\n      node = node.children[0]\n      float = true;\n    }\n    if (node.type == AstNodeType.id) {\n      this.idValue(node)\n    }\n    else {\n      this.value(node)\n    }\n  }\n\n  idValue(valueNode: AstNode) {\n    this.write(\"l\" + valueNode.value, `read from register \"${valueNode.value}\" and push it to the stack`)\n  }\n\n  value(valueNode: AstNode) {\n    this.write(valueNode.value, \"push value into the stack\")\n  }\n\n  calculation(node: AstNode) {\n    this.getValue(node.children[0])\n    if (node.children[1].type == AstNodeType.plus || node.children[1].type == AstNodeType.minus) {\n      this.calculation(node.children[1])\n    }\n    else {\n      this.getValue(node.children[1])\n    }\n    if (node.type == AstNodeType.plus) {\n      this.write(\"+\", \"pop last two values and adds them\")\n    }\n    else {\n      this.write(\"-\", \"pop last two values and substracts them\")\n    }\n  }\n\n  print(node: AstNode) {\n    this.write(\"n\", \"writes and pop from the stack\")\n  }\n\n  resetOperation() {\n    if (this.status == 0) {\n      return;\n    }\n    this.status = 0;\n    this.write(\"0 k\", \"Precision to 0 decimal values\")\n  }\n\n  toFloat() {\n    if (this.status == 5) {\n      return;\n    }\n    this.status = 5;\n    this.write(\"5 k\", \"Precision to 5 decimal values\")\n  }\n}\n\nexport default Translation;","import Parser from './Parser/Parser'\nimport { ParseTreeNode } from './Parser/SyntaxAnalysis';\nimport Scanner from './Scanner/Scanner'\nimport ErrorTable from './Tables/ErrorTable';\nimport SymbolTable from './Tables/SymbolTable';\nimport Translation from './Translation/Translation';\n\nclass Compiler {\n  errorTable: ErrorTable = new ErrorTable();\n  symbolTable: SymbolTable = new SymbolTable();\n  input: string;\n  parser: Parser;\n  translator: Translation;\n\n  constructor(input: string) {\n    this.input = input;\n    let tokens = new Scanner(this.input, this.symbolTable, this.errorTable).run();\n    this.parser = new Parser(tokens, this.symbolTable, this.errorTable);\n    this.translator = new Translation(this.parser.ast, true);\n    this.translator.run();\n  }\n}\n\nexport default Compiler;","import React from 'react';\nimport { Preloader } from 'react-materialize';\nimport \"./Loader.scss\"\n\nfunction Loader() {\n  return (\n    <div id=\"Loader\">\n      <Preloader\n        active\n        color=\"blue\"\n        flashing\n      />\n    </div>\n  )\n}\n\nexport default Loader;","import React from 'react';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css'\nimport '../node_modules/materialize-css/dist/js/materialize.min.js'\nimport './App.scss';\nimport CodeEditor from './components/CodeEditor/CodeEditor';\nimport Navbar from './components/Navbar/Navbar';\nimport OutputViewer from './components/OutputViewer/OutputViewer';\nimport Compiler from './compiler/Compiler';\nimport Loader from './components/Loader/Loader';\n\nfunction App() {\n  const [loading, setLoading] = React.useState(false);\n  const [code, setCode] = React.useState<string>(\"fbiaa=5b=a+3.2pb\");\n  const [compiler, setCompiler] = React.useState<Compiler>();\n\n  const exec = () => {\n    setLoading(true);\n    setCompiler(new Compiler(code));\n    setLoading(false);\n  }\n\n  const upload = (e: any) => {\n    //  e.target.files[0].type  e.target.files[0].size\n    const fr = new FileReader();\n    fr.onloadend = (e) => {\n      if (fr.result) {\n        setCode(fr.result.toString())\n      }\n      else {\n        setCode(\"\")\n      }\n    }\n    fr.readAsText(e.target.files[0])\n  }\n\n  return (\n    <div className=\"App\">\n      { loading && <Loader />}\n      <Navbar exec={exec} uploadCode={upload} />\n      <div className=\"row\">\n        <div className=\"col s12 m6\"><CodeEditor code={code} setCode={setCode} /></div>\n        <div className=\"col s12 m6\"><OutputViewer compiler={compiler} /></div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}